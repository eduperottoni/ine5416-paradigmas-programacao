module Board (
    Board,
    Position,
    RegionsStruct,
    Possibilities,
    generateKojun
) where

-- DEFINIÇÃO DE TIPOS

-- Board representa tanto o tabuleiro de números quanto o tabuleiro de regiões
type Board = [[Int]]
-- Position representa a posição no tabuleiro (linha, coluna)
type Position = (Int, Int)
-- RegionsStruct é uma estrutura que mapeia o id da região para as posições que estão nela
type RegionsStruct = [[Position]]
-- Possibilities é uma estrutura tridimensional de números possíveis para cada posição do puzzle
type Possibilities = [[[Int]]]


-- EXEMPLOS DE PUZZLES PARA RESOLVER

{-
    Gera um exemplo de problema Kojun e seu respectivo tabuleiro de regiões para um dado tamanho.

    Esta função retorna tabuleiros predefinidos com base no tamanho especificado.
    Para tamanhos inexistentes, ela irá gerar um erro.

    Parâmetros:

    * size - O tamanho do tabuleiro de Kojun

    Retorna:

    Uma tupla onde o primeiro elemento é o tabuleiro Kojun e o segundo elemento é o tabuleiro de regiões.

    Exemplos:

    > let (board, regionsBoard) = generateKojunProblem 6

    Erros:

    Lança um erro se o tamanho não for suportado.
-}
generateKojun :: Int -> (Board, Board)
generateKojun size = case size of
    6 -> (board6, regionsBoard6)
    8 -> (board8, regionsBoard8)
    10 -> (board10, regionsBoard10)
    17 -> (board17, regionsBoard17)
    _ -> error "Tamanho do tabuleiro não suportado"
  where
    -- Exemplo de tabuleiro 6x6 e suas regiões
    board6 :: Board
    board6 = [
        [0, 0, 0, 0, 0, 2],
        [2, 0, 0, 5, 0, 0],
        [0, 0, 3, 0, 0, 4],
        [0, 0, 0, 3, 0, 1],
        [0, 0, 0, 0, 0, 0],
        [0, 0, 3, 0, 2, 5]]

    regionsBoard6 :: Board
    regionsBoard6 = [
        [0 , 1 , 2, 2, 3, 3],
        [0 , 1 , 4, 3, 3, 3],
        [0 , 0 , 4, 4, 4, 5],
        [6 , 6 , 7, 5, 5, 5],
        [6 , 6 , 7, 8, 9, 9],
        [10, 10, 8, 8, 8, 8]]

    {-
    Solution was:
    3 2 1 2 4 2
    2 1 4 5 3 1
    1 4 3 2 1 4
    4 3 2 3 2 1
    1 2 1 4 1 2
    2 1 3 1 2 5
    -}

    -- Exemplo de tabuleiro 8x8 e suas regiões
    board8 :: Board   
    board8 = [
        [0, 1, 0, 0, 3, 0, 0, 5],
        [0, 0, 0, 1, 0, 0, 2, 3],
        [0, 0, 2, 0, 0, 0, 6, 0],
        [0, 0, 3, 4, 0, 0, 0, 0],
        [4, 7, 0, 6, 1, 5, 0, 0],
        [0, 0, 1, 0, 0, 0, 0, 0],
        [6, 0, 0, 0, 0, 4, 0, 7],
        [3, 4, 1, 0, 2, 0, 0, 0]]

    regionsBoard8 :: Board
    regionsBoard8 = [
        [0 , 0 , 0 , 6 , 6 , 6 , 6 , 7 ],
        [1 , 1 , 1 , 5 , 5 , 7 , 6 , 7 ],
        [3 , 2 , 4 , 4 , 4 , 7 , 7 , 7 ],
        [3 , 3 , 8 , 8 , 8 , 9 , 9 , 9 ],
        [15, 15, 15, 15, 8 , 11, 11, 10],
        [16, 15, 15, 15, 13, 11, 11, 10],
        [16, 16, 16, 14, 13, 14, 11, 11],
        [16, 16, 16, 14, 14, 14, 11, 12]]

    {-
    Solution was:
    3 1 2 5 3 1 4 5
    1 2 3 1 2 4 2 3
    3 1 2 3 1 2 6 1
    1 2 3 4 2 1 2 3
    4 7 5 6 1 5 6 2
    7 2 1 3 2 1 4 1
    6 5 2 5 1 4 3 7
    3 4 1 3 2 1 2 1
    -}

    -- Exemplo de tabuleiro 8x8 e suas regiões
    board10 :: Board   
    board10 = [
        [0, 0, 0, 2, 4, 0, 3, 0, 0, 3],
        [3, 0, 5, 0, 0, 0, 0, 1, 4, 0],
        [2, 0, 0, 0, 0, 2, 1, 0, 0, 2],
        [1, 6, 5, 0, 1, 5, 2, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 5, 0, 6],
        [6, 0, 3, 0, 3, 0, 0, 0, 0, 4],
        [0, 0, 0, 0, 0, 2, 4, 0, 7, 2],
        [4, 0, 2, 0, 2, 0, 0, 5, 3, 0],
        [0, 0, 0, 3, 0, 6, 0, 0, 0, 0],
        [0, 1, 0, 1, 0, 0, 0, 5, 0, 0]]

    regionsBoard10 :: Board
    regionsBoard10 = [
        [1 , 1 , 1 , 1 , 3 , 3 , 4 , 5 , 5 , 5 ],
        [2 , 1 , 1 , 8 , 3 , 3 , 4 , 4 , 5 , 6 ],
        [2 , 2 , 2 , 8 , 8 , 3 , 3 , 5 , 5 , 7 ],
        [2 , 11, 11, 8 , 8 , 9 , 9 , 5 , 7 , 7 ],
        [12, 12, 11, 11, 9 , 9 , 9 , 10, 7 , 10],
        [12, 11, 11, 11, 13, 13, 10, 10, 10, 10],
        [12, 14, 16, 17, 17, 13, 13, 13, 13, 10],
        [12, 14, 14, 18, 17, 13, 20, 21, 21, 22],
        [12, 15, 14, 19, 17, 20, 20, 21, 21, 21],
        [12, 15, 15, 19, 19, 20, 20, 20, 21, 21]]

    {-
    Solution was:
    4 3 6 2 4 6 3 2 5 3
    3 1 5 4 3 5 2 1 4 1
    2 5 4 3 5 2 1 7 1 2
    1 6 5 2 1 5 2 6 4 1
    7 1 4 7 4 3 1 5 3 6
    6 2 3 1 3 5 7 3 1 4
    5 4 1 3 4 2 4 6 7 2
    4 3 2 1 2 1 3 5 3 1
    3 2 1 3 1 6 2 4 2 7
    2 1 3 1 2 4 1 5 1 6
    -}


    -- Exemplo de tabuleiro 17x17 e suas regiões
    board17 :: Board
    board17 = [[0, 0, 3, 0, 2, 0, 3, 0, 0, 0, 7, 0, 0, 5, 0, 3, 6], 
                    [0, 0, 0, 0, 0, 2, 0, 6, 0, 2, 0, 0, 3, 0, 0, 2, 0], 
                    [0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 5, 1, 0, 2, 0, 0, 0], 
                    [3, 0, 7, 0, 0, 5, 0, 0, 0, 0, 0, 7, 4, 0, 2, 0, 0], 
                    [2, 1, 0, 2, 0, 0, 0, 3, 0, 5, 0, 0, 6, 0, 0, 0, 1], 
                    [0, 3, 4, 0, 0, 0, 3, 0, 0, 0, 3, 0, 5, 0, 0, 0, 3], 
                    [3, 1, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
                    [0, 7, 0, 5, 2, 6, 0, 0, 0, 0, 1, 0, 1, 0, 2, 0, 6], 
                    [0, 0, 5, 0, 0, 2, 0, 5, 0, 5, 0, 7, 0, 3, 0, 4, 0], 
                    [0, 0, 0, 0, 7, 0, 3, 0, 2, 3, 0, 0, 4, 0, 0, 3, 1], 
                    [5, 0, 3, 0, 5, 0, 6, 0, 0, 4, 0, 4, 0, 3, 0, 0, 0], 
                    [0, 0, 0, 6, 0, 0, 0, 0, 4, 0, 5, 0, 0, 2, 0, 2, 0], 
                    [0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 1, 0, 0, 4, 0, 5], 
                    [0, 6, 3, 4, 0, 4, 5, 0, 6, 2, 0, 0, 1, 4, 0, 3, 0], 
                    [0, 2, 0, 0, 0, 0, 3, 0, 4, 0, 3, 0, 6, 0, 0, 0, 0], 
                    [0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0], 
                    [6, 2, 0, 0, 1, 3, 1, 7, 1, 2, 0, 4, 0, 4, 1, 0, 6]]

    regionsBoard17 :: Board
    regionsBoard17 = [[0 , 1 , 1 , 1 , 1 , 2 , 3 , 4 , 4 , 5 , 6 , 6 , 7 , 7 , 8 , 9 , 9 ],
                    [10, 11, 11, 12, 3 , 3 , 3 , 13, 13, 13, 6 , 6 , 6 , 7 , 7 , 9 , 9 ],
                    [10, 10, 12, 12, 14, 14, 14, 13, 13, 13, 6 , 6 , 7 , 7 , 9 , 9 , 9 ],
                    [15, 15, 16, 16, 16, 14, 14, 17, 17, 18, 18, 18, 18, 19, 19, 20, 20],
                    [15, 15, 16, 16, 21, 22, 14, 17, 17, 18, 23, 24, 19, 19, 25, 26, 20],
                    [27, 28, 16, 16, 21, 22, 22, 22, 18, 18, 23, 19, 19, 25, 25, 26, 26],
                    [29, 28, 28, 29, 21, 30, 30, 22, 31, 23, 23, 32, 19, 25, 25, 33, 34],
                    [29, 29, 29, 29, 29, 35, 30, 30, 31, 23, 23, 32, 32, 25, 33, 33, 36],
                    [37, 38, 38, 38, 35, 35, 35, 30, 31, 39, 39, 39, 40, 40, 33, 36, 36],
                    [37, 37, 38, 41, 41, 35, 35, 30, 43, 39, 39, 39, 44, 40, 36, 36, 36],
                    [37, 37, 38, 41, 41, 41, 42, 43, 43, 43, 45, 39, 44, 44, 44, 44, 46],
                    [37, 37, 38, 38, 47, 41, 42, 42, 48, 48, 45, 45, 45, 44, 49, 46, 46],
                    [50, 51, 51, 52, 47, 41, 42, 42, 54, 48, 48, 45, 45, 49, 49, 49, 49],
                    [50, 50, 51, 52, 47, 47, 53, 42, 55, 48, 48, 56, 57, 57, 49, 58, 58],
                    [50, 50, 51, 52, 52, 53, 53, 59, 55, 55, 56, 56, 56, 57, 60, 58, 58],
                    [50, 50, 61, 61, 52, 53, 53, 59, 55, 55, 56, 62, 62, 57, 60, 60, 63],
                    [61, 61, 61, 61, 52, 52, 53, 53, 55, 55, 56, 56, 62, 60, 60, 60, 60]]

    {-
    Solution was:
    1 4 3 1 2 1 3 1 2 1 7 4 1 5 1 3 6
    3 1 2 3 4 2 1 6 5 2 6 2 3 4 3 2 5
    1 2 1 2 3 6 4 3 4 1 5 1 6 2 7 1 4
    3 4 7 3 6 5 2 4 2 6 3 7 4 3 2 3 2
    2 1 5 2 3 2 1 3 1 5 6 1 6 1 3 2 1
    1 3 4 1 2 1 3 5 2 1 3 7 5 6 2 1 3
    3 1 2 6 1 3 2 4 3 5 2 3 4 5 1 4 1
    1 7 4 5 2 6 1 6 2 4 1 2 1 4 2 3 6
    7 1 5 7 5 2 4 5 1 5 2 7 2 3 1 4 5
    6 3 4 6 7 1 3 4 2 3 1 6 4 1 2 3 1
    5 2 3 4 5 3 6 3 1 4 6 4 1 3 5 6 3
    4 1 2 6 3 2 4 5 4 6 5 3 4 2 6 2 1
    7 2 4 5 2 1 3 2 1 5 3 1 2 3 4 1 5
    5 6 3 4 1 4 5 1 6 2 1 7 1 4 2 3 4
    4 2 1 2 7 6 3 2 4 7 3 5 6 3 7 1 2
    3 1 4 5 6 4 2 1 3 5 2 1 3 2 5 3 1
    6 2 1 3 1 3 1 7 1 2 1 4 2 4 1 2 6
    -}
